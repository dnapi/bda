Variable = names(list_cor),
Correlation = as.vector(list_cor)
)
# Display the correlation coefficients
correlations_df %>% filter(Correlation > 0)
df = data_behaviour[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.07)  %>%  dplyr::select(Variable)
as.list(col_names$Variable)
hist(df$Purchased)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
library(psych)
df <- data_behaviour[, -1]
# Create a scatterplot matrix
pairs.panels(df, pch = 16, col = "blue")
df = data_behaviour[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.0)  %>%  dplyr::select(Variable)
as.list(col_names$Variable)
hist(df$Purchased)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
df = data_behaviour
correlations <- sapply(df[, -which(names(df) == "Purchased")], function(x) biserial.cor(x, df$Purchased))
list_cor = sort(round(abs(correlations),3))
correlations_df <- data.frame(
Variable = names(list_cor),
Correlation = as.vector(list_cor)
)
# Display the correlation coefficients
correlations_df %>% filter(Correlation > 0)
df = data_behaviour
correlations <- sapply(df[, -which(names(df) == "Purchased")], function(x) biserial.cor(x, df$Purchased))
list_cor = sort(round(abs(correlations),3))
correlations_df <- data.frame(
Variable = names(list_cor),
Correlation = as.vector(list_cor)
)
# Display the correlation coefficients
correlations_df %>% filter(Correlation > 0)
df = data_behaviour[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.0)  %>%  dplyr::select(Variable)
as.list(col_names$Variable)
hist(df$Purchased)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
df = data_behaviour[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.01)  %>%  dplyr::select(Variable)
as.list(col_names$Variable)
hist(df$Purchased)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
df = data_behaviour[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.01)  %>%  dplyr::select(Variable)
#as.list(col_names$Variable)
hist(df$Purchased)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
#| label: imports
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist) # for stat_dotsinterval
library(posterior)
if(!require(brms)){
install.packages("brms")
library(brms)
}
# Set more readable themes with bigger font for plotting packages.
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))
# This registers CmdStan as the backend for compiling cmdstan-chunks.
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
register_knitr_engine(override = FALSE)
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
library(readxl)
library(corrplot)
library(psych)
library(ltm)
#file_path <- "default-credit-card.xls"
#data <- read_excel(file_path)
file_path_credit <- "default-credit-card.csv"
file_path_credit_names <- "names-default-credit-card.csv"
data_credit <- read.csv(file_path_credit)
data_credit_names <- read.csv(file_path_credit_names)
credit_short_colnames <- colnames(data_credit)
credit_long_colnames <- colnames(data_credit_names)
# Display the contents of the data frame
colnames(data_credit) <- credit_long_colnames
print(head(data_credit))
#colnames(data_credit) <- credit_short_colnames
colnames(data_credit) <- credit_long_colnames
df = data_credit
#correlations <- sapply(df[, -which(names(df) == "Y")], function(x) cor.test(x, df$Y)$estimate)
#correlations <- sapply(df[, -which(names(df) == "Y")], function(x) biserial.cor(x, df$Y))
correlations <- sapply(df[, -which(names(df) == "default")], function(x) biserial.cor(x, df$default))
list_cor = sort(round(abs(correlations),3))
correlations_df <- data.frame(
Variable = names(list_cor),
Correlation = as.vector(list_cor)
)
# Display the correlation coefficients
data_credit_names
correlations_df %>% filter(Correlation > 0.07)
# Calculate the correlation matrix
cor_matrix <- cor(data_credit[, -1])  # Exclude first column that is index)
# Create a correlation matrix plot
#corrplot(cor_matrix, method = "number", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45,cl.cex = 0.7,tl.cex =0.7,number.cex = 0.4)
title("Correlation Matrix Plot")
print(t(data_credit_names))
correlations <- cor(data_credit[, 'default'], data_credit[, -which(names(data_credit) == 'default')])
round(correlations,3)
df = data_credit[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.07)  %>%  dplyr::select(Variable)
as.list(col_names$Variable)
hist(df$default)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
fit <- brm(Admission ~ PAY_0 + PAY_1,
data = data_credit,
family = bernoulli(),
refresh = 0)
data_credit
fit <- brm(Admission ~ PAY_0 + PAY_1,
data = data_credit,
family = bernoulli(),
refresh = 0)
fit <- brm(default ~ PAY_0 + PAY_1,
data = data_credit,
family = bernoulli(),
refresh = 0)
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
family = bernoulli(),
refresh = 0)
start.time <- Sys.time()
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
family = bernoulli(),
refresh = 0)
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
plot(fit)
print(fit)
plot(fit)
start.time <- Sys.time()
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
family = bernoulli(),
refresh = 0,
prior=c(
prior(normal(0,100), class="Intercept")
#prior(exponential(.02), class="sd"),#p(tau)
#prior(exponential(.02), class="sigma") #p(sigma)
),
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
start.time <- Sys.time()
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
family = bernoulli(),
refresh = 0,
prior=c(
prior(normal(0,100), class="Intercept")
#prior(exponential(.02), class="sd"),#p(tau)
#prior(exponential(.02), class="sigma") #p(sigma)
)
)
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
print(fit)
plot(fit)
start.time <- Sys.time()
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
refresh = 0,
prior=c(
prior(normal(0,100), class="Intercept")
#prior(exponential(.02), class="sd"),#p(tau)
#prior(exponential(.02), class="sigma") #p(sigma)
),
#family = bernoulli(),
#file = "model1"
family = binomial("logit"),
file = "model2"
)
start.time <- Sys.time()
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
refresh = 0,
prior=c(
prior(normal(0,100), class="Intercept")
#prior(exponential(.02), class="sd"),#p(tau)
#prior(exponential(.02), class="sigma") #p(sigma)
),
family = bernoulli(),
file = "model1"
)
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
print(fit)
plot(fit)
mcmc_pairs(fit)
predictions <- predict(fit, newdata = data_credit, type = "response")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
install.packages("caret")
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
#install.packages("caret") # confusion matrix -> F1
library(readxl)
library(corrplot)
library(psych)
library(ltm)
library(caret)
#| label: imports
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist) # for stat_dotsinterval
library(posterior)
if(!require(brms)){
install.packages("brms")
library(brms)
}
# Set more readable themes with bigger font for plotting packages.
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))
# This registers CmdStan as the backend for compiling cmdstan-chunks.
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
register_knitr_engine(override = FALSE)
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
#install.packages("caret") # confusion matrix -> F1
library(readxl)
library(corrplot)
library(psych)
library(ltm)
library(caret)
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
conf_matrix <- confusionMatrix(factor(binary_predictions), factor(df$default))
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
#install.packages("caret") # confusion matrix -> F1
install.packages(c("tidymodels", "bayesplot"))
install.packages(c("tidymodels", "bayesplot"))
install.packages(c("tidymodels", "bayesplot"))
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
#install.packages("caret") # confusion matrix -> F1
install.packages(c("tidymodels", "bayesplot"))
install.packages(c("tidymodels", "bayesplot"))
install.packages(c("tidymodels", "bayesplot"))
install.packages(c("tidymodels", "bayesplot"))
install.packages(c("tidymodels", "bayesplot"))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
library(tidymodels)
library(yardstick)
# Create confusion matrix and calculate F1 score
conf_matrix <- conf_mat(factor(binary_predictions), factor(df$Y))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
library(tidymodels)
library(yardstick)
# Create confusion matrix and calculate F1 score
conf_matrix <- conf_mat(factor(binary_predictions), factor(df$default))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
library(tidymodels)
library(yardstick)
# Create confusion matrix and calculate F1 score
conf_matrix <- conf_mat(factor(binary_predictions), factor(data_credit$default))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
actual <- factor(rep(c(1, 0), times=c(160, 240)))
pred <- factor(rep(c(1, 0, 1, 0), times=c(120, 40, 70, 170)))
#create confusion matrix and calculate metrics related to confusion matrix
confusionMatrix(pred, actual, mode = "everything", positive="1")
library(readxl)
library(corrplot)
library(psych)
library(ltm)
library(caret)
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
install.packages("caret") # confusion matrix -> F1
library(readxl)
library(corrplot)
library(psych)
library(ltm)
library(caret)
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
# Import caret library
library(caret)
# Create Data
actual <- factor(rep(c(1, 2),
times=c(16, 24)))
predicted <- factor(rep(c(1, 2, 1, 2),
times=c(12, 4, 7, 17)))
# create confusion matrix
confusionMatrix(predicted, actual,
mode = "everything",
positive="1")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
# Import caret library
library(caret)
# Create Data
actual <- factor(rep(c(1, 2),
times=c(16, 24)))
predicted <- factor(rep(c(1, 2, 1, 2),
times=c(12, 4, 7, 17)))
# create confusion matrix
confusionMatrix(binary_predictions, data_credit$default,
mode = "everything",
positive="1")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
# Import caret library
library(caret)
dim(predictions)
dim(data_credit)
# create confusion matrix
confusionMatrix(binary_predictions, data_credit$default,
mode = "everything",
positive="1")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
# Import caret library
library(caret)
dim(predictions)
dim(data_credit$default)
# create confusion matrix
confusionMatrix(binary_predictions, data_credit$default,
mode = "everything",
positive="1")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
# Import caret library
library(caret)
dim(predictions)
predictions
dim(data_credit$default)
# create confusion matrix
confusionMatrix(binary_predictions, data_credit$default,
mode = "everything",
positive="1")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
# Import caret library
library(caret)
dim(binary_predictions)
binary_predictions
dim(data_credit$default)
# create confusion matrix
confusionMatrix(binary_predictions, data_credit$default,
mode = "everything",
positive="1")
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
library(caret)
# Create confusion matrix and calculate F1 score
conf_matrix <- confusionMatrix(factor(binary_predictions), factor(df$Y))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
library(caret)
# Create confusion matrix and calculate F1 score
conf_matrix <- confusionMatrix(factor(binary_predictions), factor(credit_data$default))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
dim(binary_predictions)
dim(credit_data$default)
library(caret)
# Create confusion matrix and calculate F1 score
conf_matrix <- confusionMatrix(factor(binary_predictions), factor(credit_data$default))
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
dim(binary_predictions)
dim(credit_data['default'])
binary_predictions <- ifelse(predictions > 0.5, 1, 0)
dim(binary_predictions)
credit_data$default
library(caret)
# Create confusion matrix and calculate F1 score
conf_matrix <- confusionMatrix(factor(binary_predictions), factor(credit_data$default))
#| label: imports
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist) # for stat_dotsinterval
library(posterior)
if(!require(brms)){
install.packages("brms")
library(brms)
}
# Set more readable themes with bigger font for plotting packages.
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))
# This registers CmdStan as the backend for compiling cmdstan-chunks.
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
register_knitr_engine(override = FALSE)
#install.packages("readxl")
#install.packages("corrplot")
#install.packages("psych")
#install.packages("stats")
#install.packages("ltm")
install.packages("caret") # confusion matrix -> F1
library(readxl)
library(corrplot)
library(psych)
library(ltm)
library(caret)
#file_path <- "default-credit-card.xls"
#data <- read_excel(file_path)
file_path_credit <- "default-credit-card.csv"
file_path_credit_names <- "names-default-credit-card.csv"
data_credit <- read.csv(file_path_credit)
data_credit_names <- read.csv(file_path_credit_names)
credit_short_colnames <- colnames(data_credit)
credit_long_colnames <- colnames(data_credit_names)
# Display the contents of the data frame
colnames(data_credit) <- credit_long_colnames
print(head(data_credit))
#colnames(data_credit) <- credit_short_colnames
colnames(data_credit) <- credit_long_colnames
df = data_credit
#correlations <- sapply(df[, -which(names(df) == "Y")], function(x) cor.test(x, df$Y)$estimate)
#correlations <- sapply(df[, -which(names(df) == "Y")], function(x) biserial.cor(x, df$Y))
correlations <- sapply(df[, -which(names(df) == "default")], function(x) biserial.cor(x, df$default))
list_cor = sort(round(abs(correlations),3))
correlations_df <- data.frame(
Variable = names(list_cor),
Correlation = as.vector(list_cor)
)
# Display the correlation coefficients
data_credit_names
correlations_df %>% filter(Correlation > 0.07)
# Calculate the correlation matrix
cor_matrix <- cor(data_credit[, -1])
# Create a correlation matrix plot
#corrplot(cor_matrix, method = "number", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45,cl.cex = 0.7,tl.cex =0.7,number.cex = 0.4)
title("Correlation Matrix Plot")
print(t(data_credit_names))
correlations <- cor(data_credit[, 'default'], data_credit[, -which(names(data_credit) == 'default')])
round(correlations,3)
df = data_credit[, -1]
col_names <- correlations_df %>% filter(Correlation > 0.07)  %>%  dplyr::select(Variable)
as.list(col_names$Variable)
hist(df$default)
#par(mfrow = c(1, ncol(df)))
#for (col in names(df)) {
for (col in as.list(col_names$Variable)) {
hist(df[[col]], main = col, xlab = col, col = "skyblue", border = "black")
}
data_credit
start.time <- Sys.time()
fit <- brm(default ~ PAY_0 + PAY_2,
data = data_credit,
refresh = 0,
prior=c(
prior(normal(0,100), class="Intercept")
#prior(exponential(.02), class="sd"),#p(tau)
#prior(exponential(.02), class="sigma") #p(sigma)
),
family = bernoulli(),
file = "model1"
)
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
time.taken
print(fit)
plot(fit)
mcmc_pairs(fit)
